name: Build rpi4 archlinuxarm

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      BUILD_SH: 'sudo arch-chroot ./builder qemu-aarch64-static /usr/bin/bash -c'
      TARGET_SH: 'sudo arch-chroot ./builder qemu-aarch64-static /usr/bin/bash arch-chroot /mnt /usr/bin/bash -c'
      IMG_NAME: 'ArchLinuxARM-rpi-4-aarch64-latest'

    steps:
      - name: delete old release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo V_SD=$(losetup -f) >> $GITHUB_ENV
          echo RELEASE=$(date +%Y%m%d) >> $GITHUB_ENV
        shell: bash

      - name: generate builder
        run: |
          sudo apt install qemu-user-static libarchive-tools arch-install-scripts
          sudo curl -L -o ./ArchLinuxARM-aarch64-latest.tar.gz http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
          sudo mkdir ./builder
          sudo bsdtar -xpf ./ArchLinuxARM-aarch64-latest.tar.gz -C ./builder
          sudo cp /usr/bin/qemu-aarch64-static ./builder/usr/bin/qemu-aarch64-static
          sudo cp -f ./pacman.conf ./builder/etc/pacman.conf
          ${{ env.BUILD_SH }} "pacman -Sy --ask=4 arch-install-scripts"
        shell: bash

      - name: prepare image file
        run: |
          dd if=/dev/zero of=${{ env.IMG_NAME }}.img bs=4000000 count=1000
          sudo losetup --partscan ${{ env.V_SD }} ${{ env.IMG_NAME }}.img
          sudo parted -s ${{ env.V_SD }} mklabel msdos
          sudo parted -s ${{ env.V_SD }} mkpart primary fat32 2048s 411647s
          sudo parted -s ${{ env.V_SD }} mkpart primary ext4 411648s 7812499s
          sudo mkfs.vfat -F 32 ${{ env.V_SD }}p1
          sudo mkfs.ext4 ${{ env.V_SD }}p2
          ${{ env.BUILD_SH }} "tune2fs -O ^has_journal ${{ env.V_SD }}p2"
          ${{ env.BUILD_SH }} "mount -o sync,noatime ${{ env.V_SD }}p2 /mnt"
          ${{ env.BUILD_SH }} "mkdir -p /mnt/boot"
          ${{ env.BUILD_SH }} "mount -o sync,noatime ${{ env.V_SD }}p1 /mnt/boot"
        shell: bash

      - name: generate target
        run: |
          ${{ env.BUILD_SH }} "pacstrap -cGM /mnt $(cat packages.md)"
          ${{ env.BUILD_SH }} "rm /mnt/etc/resolv.conf"
          ${{ env.BUILD_SH }} "ln -s /run/systemd/resolve/resolv.conf /mnt/etc/resolv.conf"
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=en*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/en.network"
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=eth*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/eth.network"
          ${{ env.BUILD_SH }} "echo '/dev/mmcblk0p1  /boot   vfat    defaults        0       0'>>/mnt/etc/fstab"
          ${{ env.BUILD_SH }} "echo 'alarm'>/mnt/etc/hostname"
          ${{ env.BUILD_SH }} "echo 'LANG=C'>/mnt/etc/locale.conf"
          ${{ env.BUILD_SH }} "useradd -d /home/alarm -m -U alarm --root /mnt"
          ${{ env.BUILD_SH }} "echo -e 'root:root\nalarm:alarm' | chpasswd --root /mnt"
          ${{ env.BUILD_SH }} "usermod -a -G wheel alarm --root /mnt"
          ${{ env.BUILD_SH }} "echo -n > /mnt/etc/machine-id"
          ${{ env.TARGET_SH }} "systemctl enable $(cat services.md)"
        shell: bash

      - name: clean and create compressed file
        run: |
          LC_ALL=C
          LANG=C
          LANGUAGE=
          ${{ env.BUILD_SH }} "rm -rf /mnt/etc/*- /mnt/root/.bash_history /mnt/root/.gnupg /mnt/var/log/* /mnt/var/lib/systemd/* "
          ${{ env.BUILD_SH }} "bsdtar --exclude 'lost+found' -czpf /${{ env.IMG_NAME }}.tar.gz -C /mnt/ ."
        shell: bash

      - name: create and enable resize2fs_once service
        run: |
          ${{ env.BUILD_SH }} "curl -L -o /mnt/usr/bin/growpart https://github.com/BurningC4/ArchlinuxARM-rpi4-aarch64-builder/raw/main/growpart"
          ${{ env.BUILD_SH }} "curl -L -o /mnt/etc/systemd/system/resize2fs_once.service https://github.com/BurningC4/ArchlinuxARM-rpi4-aarch64-builder/raw/main/resize2fs_once.service"
          ${{ env.BUILD_SH }} "chmod a+x /mnt/usr/bin/growpart"
          ${{ env.TARGET_SH }} "systemctl enable resize2fs_once"
        shell: bash

      - name: clean and package img file
        run: |
          ${{ env.BUILD_SH }} "rm -rf /mnt/etc/*- /mnt/root/.bash_history /mnt/root/.gnupg /mnt/var/log/* /mnt/var/lib/systemd/* "
          ${{ env.BUILD_SH }} "umount -R /mnt"
          ${{ env.BUILD_SH }} "tune2fs -O has_journal ${{ env.V_SD }}p2"
          sudo losetup -d ${{ env.V_SD }}
          zip ${{ env.IMG_NAME }}.img.zip ${{ env.IMG_NAME }}.img
        shell: bash

      - name: generate release
        run: |
          mkdir ./release
          sudo mv ./builder/${{ env.IMG_NAME }}.tar.gz ./release/${{ env.IMG_NAME }}.tar.gz
          sudo mv ./${{ env.IMG_NAME }}.img.zip ./release/${{ env.IMG_NAME }}.img.zip
          sha256sum ./release/${{ env.IMG_NAME }}.tar.gz > ./release/${{ env.IMG_NAME }}.tar.gz.sha256sum
          sha256sum ./release/${{ env.IMG_NAME }}.img.zip > ./release/${{ env.IMG_NAME }}.img.zip.sha256sum
        shell: bash

      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: latest
          draft: false
          prerelease: false
          body: |
            ${{ env.RELEASE  }}

      - name: Upload ArchLinuxARM-rpi-4-aarch64-latest.tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.IMG_NAME }}.tar.gz
          asset_name: ${{ env.IMG_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload ArchLinuxARM-rpi-4-aarch64-latest.tar.gz.sha256sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.IMG_NAME }}.tar.gz.sha256sum
          asset_name: ${{ env.IMG_NAME }}.tar.gz.sha256sum
          asset_content_type: text/plain

      - name: Upload ArchLinuxARM-rpi-4-aarch64-latest.img.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.IMG_NAME }}.img.zip
          asset_name: ${{ env.IMG_NAME }}.img.zip
          asset_content_type: application/gzip

      - name: Upload ArchLinuxARM-rpi-4-aarch64-latest.tar.gz.sha256sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.IMG_NAME }}.img.zip.sha256sum
          asset_name: ${{ env.IMG_NAME }}.img.zip.sha256sum
          asset_content_type: text/plain
